(exports ? this).Retrie = class
  (strings, asPrefixes) ~>
    @tree = {}
    @add str, asPrefixes for str of strings if strings

  # Adds `string` to the trie and returns self.
  # If `asPrefixes`, instead adds every prefix of `string`. i.e.:
  #
  #     Retrie().add('ab', true) == '' + Retrie().add('a').add('ab')
  #
  add: (string, asPrefixes) ->
    ref = @tree
    for i from string.length
      ref = ref[string.charAt i] ||= if asPrefixes then {''} else {}
    # Empty string indicates terminator.
    ref <<< {''} unless asPrefixes
    this

  toString: ->
    function recur ->
      alt = []; cc = []
      for chr in it
        unless chr then q = true; continue
        (if sub = recur it[chr] then alt else cc).push \
          (if ~'.?*+^$|(){[\\'.indexOf chr then \\ + chr else chr) + sub
      return '' if q and not sub?
      cconly = !alt.length
      cc.length and alt.push if cc.1 then "[#{ cc.join '' }]" else cc.0
      re = if alt.1 then "(?:#{ alt.join \| })" else alt.0
      q and re = if cconly then re + \? else "(?:#{re})?"
      re or ''
    recur @tree
